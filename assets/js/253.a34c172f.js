(window.webpackJsonp=window.webpackJsonp||[]).push([[253],{575:function(t,r,c){"use strict";c.r(r);var a=c(21),e=Object(a.a)({},(function(){var t=this,r=t.$createElement,c=t._self._c||r;return c("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[c("h1",{attrs:{id:"git-cherry-pick으로-다른-브랜치의-일부-커밋만-반영"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#git-cherry-pick으로-다른-브랜치의-일부-커밋만-반영"}},[t._v("#")]),t._v(" git cherry-pick으로 다른 브랜치의 일부 커밋만 반영")]),t._v(" "),c("p",[t._v("오늘은 git cherry-pick 명령어로 원하는 커밋만 브랜치에 반영하는 방법에 대해 알아보겠습니다!")]),t._v(" "),c("h2",{attrs:{id:"이-작업을-하는-이유"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#이-작업을-하는-이유"}},[t._v("#")]),t._v(" 이 작업을 하는 이유")]),t._v(" "),c("p",[t._v("이 명령어는 여러 브랜치의 여러 커밋 중에 원하는 커밋만 현재 브랜치에 불러올 때 사용합니다.")]),t._v(" "),c("p",[t._v("커밋을 다른 브랜치에 잘못 하거나, 요구사항이 바뀌어 필요 없는 커밋이 생기거나, 코드 의존성(dependency) 때문에 다른 사람의 커밋 중 일부를 가져와야 하는 경우가 종종 생길 때도 사용합니다!")]),t._v(" "),c("h2",{attrs:{id:"사용법"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#사용법"}},[t._v("#")]),t._v(" 사용법")]),t._v(" "),c("p",[c("code",[t._v("git cherry-pick <Commit1> <Commit2> <...>")])]),t._v(" "),c("h2",{attrs:{id:"예시"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#예시"}},[t._v("#")]),t._v(" 예시")]),t._v(" "),c("p",[t._v("여러 브랜치를 만들고 여러 커밋을 생성합니다.")]),t._v(" "),c("div",{staticClass:"language- extra-class"},[c("pre",{pre:!0,attrs:{class:"language-text"}},[c("code",[t._v('git checkout -b branch1\ngit commit -m "1" // 편의상 해쉬값은 branch1-1이라고 합니다.\ngit commit -m "2" // 편의상 해쉬값은 branch1-1이라고 합니다.\n\ngit checkout -b branch2\ngit commit -m "3" // 편의상 해쉬값은 branch2-3이라고 합니다.\ngit commit -m "4" // 편의상 해쉬값은 branch2-4이라고 합니다.\n')])])]),c("p",[t._v("이제 이중에서 branch1의 2번째 커밋과, branch2의 1번 커밋을 master브랜치에 반영하겠습니다.")]),t._v(" "),c("div",{staticClass:"language- extra-class"},[c("pre",{pre:!0,attrs:{class:"language-text"}},[c("code",[t._v("git checkout master\ngit cherry-pick branch1-1 branch2-3\n")])])]),c("p",[t._v("위 명령어를 통해 해당 커밋에 바뀐 내용만 현재 브랜치에 반영할 수 있습니다.")]),t._v(" "),c("h2",{attrs:{id:"cherry-pick으로-merge시-conflict이-생긴다면"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#cherry-pick으로-merge시-conflict이-생긴다면"}},[t._v("#")]),t._v(" cherry-pick으로 merge시 conflict이 생긴다면?")]),t._v(" "),c("h3",{attrs:{id:"cherry-pick을-중지한다"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#cherry-pick을-중지한다"}},[t._v("#")]),t._v(" cherry-pick을 중지한다")]),t._v(" "),c("p",[c("code",[t._v("git cherry-pick --abort")]),t._v(" 명령어로 중지하면 cherry-pick 이전 상태로 되돌아갑니다.")]),t._v(" "),c("h3",{attrs:{id:"conflick을-해결하고-계속-진행한다"}},[c("a",{staticClass:"header-anchor",attrs:{href:"#conflick을-해결하고-계속-진행한다"}},[t._v("#")]),t._v(" conflick을 해결하고 계속 진행한다.")]),t._v(" "),c("p",[t._v("conflict난 코드를 수정하고 "),c("code",[t._v("git add <path>")]),t._v("로 다시 git에 staging 시킵니다. 커밋을 다시 할 필요 없습니다.")]),t._v(" "),c("p",[t._v("이후 "),c("code",[t._v("git cherry-pick --continue")]),t._v(" 명령어를 실행하면 다시 cherry-pick이 진행됩니다.")]),t._v(" "),c("TagLinks"),t._v(" "),c("Comment")],1)}),[],!1,null,null,null);r.default=e.exports}}]);