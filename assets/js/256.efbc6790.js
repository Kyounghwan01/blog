(window.webpackJsonp=window.webpackJsonp||[]).push([[256],{563:function(t,e,a){"use strict";a.r(e);var s=a(21),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"git-reset-revert로-이전-커밋으로-돌리기"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#git-reset-revert로-이전-커밋으로-돌리기"}},[t._v("#")]),t._v(" git reset, revert로 이전 커밋으로 돌리기")]),t._v(" "),a("p",[t._v("오늘은 git reset, revert를 이용하여 이전 커밋으로 돌리는 방법에 대해서 알아보겠습니다!")]),t._v(" "),a("h2",{attrs:{id:"이-작업을-하는-이유"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#이-작업을-하는-이유"}},[t._v("#")]),t._v(" 이 작업을 하는 이유")]),t._v(" "),a("p",[t._v("단편적인 예로 이전 돌아가고 싶은 커밋으로 가고 싶을 때 사용하거나, master 브랜치로 릴리즈를 했는데 치명적인 버그로 인하여 롤백해야하는 경우 이전 커밋으로 되돌아가기 위해 위 명령어를 사용합니다!")]),t._v(" "),a("h2",{attrs:{id:"reset-revert-차이"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-revert-차이"}},[t._v("#")]),t._v(" reset, revert 차이")]),t._v(" "),a("p",[t._v("둘다 이전 커밋으로 되돌린다는 점에서는 동일하나")]),t._v(" "),a("p",[t._v("github 같은 온라인 저장소에 올라가 다른 사람간 코드 공유의 유(revert)무(reset)에 따라서 달라집니다.")]),t._v(" "),a("h2",{attrs:{id:"reset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset"}},[t._v("#")]),t._v(" reset")]),t._v(" "),a("p",[t._v("origin에 올리지 않고 로컬에 커밋이 머물렀다면, 올라갔어도 나만 해당 브랜치를 사용한다면 reset를 쓰셔도 좋습니다.")]),t._v(" "),a("p",[t._v("사용법은 "),a("code",[t._v("git reset --option 돌아갈 커밋")]),t._v("입니다.")]),t._v(" "),a("p",[t._v("아래 예시로 알아보겠습니다.")]),t._v(" "),a("ol",[a("li",[t._v("commit을 여러번 합니다.")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git commit -m "1"\ngit commit -m "2"\ngit commit -m "3"\n')])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("commit을 바로 이전 상황으로 돌립니다.")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git reset HEAD^\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("여러개의 commit 이전으로 돌리는 경우")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git reset HEAD~2\n")])])]),a("ul",[a("li",[a("code",[t._v("1")]),t._v(" 커밋으로 되돌아갑니다.")]),t._v(" "),a("li",[a("code",[t._v("HEAD~2")]),t._v(" 부분에 커밋 해쉬를 써도 되돌아갑니다.")])]),t._v(" "),a("h3",{attrs:{id:"reset-옵션"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-옵션"}},[t._v("#")]),t._v(" reset 옵션")]),t._v(" "),a("h4",{attrs:{id:"hard"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hard"}},[t._v("#")]),t._v(" --hard")]),t._v(" "),a("ul",[a("li",[t._v("hard 옵션을 사용하면 돌아간 커밋 이후의 변경 이력은 모두 삭제합니다.")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git commit -m "1"\ngit commit -m "2"\ngit commit -m "3"\n\ngit reset --hard [1번commit hash]\ngit push\n')])])]),a("ul",[a("li",[t._v("즉, 위처럼 실행할 경우 2, 3번 커밋 반영 내용은 모두 사라집니다. 물론 코드도 날아가지요.")])]),t._v(" "),a("h4",{attrs:{id:"mixed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mixed"}},[t._v("#")]),t._v(" --mixed")]),t._v(" "),a("ul",[a("li",[t._v("변경 이력은 모두 삭제하지만 변경 내용은 남아있습니다.")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git commit -m "1"\ngit commit -m "2"\ngit commit -m "3"\n\ngit reset --mixed [1번commit hash]\ngit add .\ngit commit -m "~"\ngit push\n')])])]),a("ul",[a("li",[t._v("위처럼 실행할 경우 이력은 날아가나 unStage 상태로 코드는 남아있습니다. 코드를 반영하려면 "),a("code",[t._v("add")]),t._v(" 명령어로 stage에 반영하고 commit 합니다.")])]),t._v(" "),a("h4",{attrs:{id:"soft"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#soft"}},[t._v("#")]),t._v(" --soft")]),t._v(" "),a("ul",[a("li",[t._v("변경 이력은 모두 삭제하지만 변경 내용은 남아있습니다. 그러나 stage 되어있습니다.")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git commit -m "1"\ngit commit -m "2"\ngit commit -m "3"\n\ngit reset --soft [1번commit hash]\ngit commit -m "~"\ngit push\n')])])]),a("ul",[a("li",[t._v("즉, "),a("code",[t._v("add")]),t._v("명령어 필요없이 바로 commit 진행 가능합니다.")])]),t._v(" "),a("h3",{attrs:{id:"origin에-올린-상태에서-reset하고-push-한다면"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#origin에-올린-상태에서-reset하고-push-한다면"}},[t._v("#")]),t._v(" origin에 올린 상태에서 reset하고 push 한다면?")]),t._v(" "),a("ul",[a("li",[t._v("로컬은 origin에 있는 commit을 삭제한 채로 origin에 덮으려고 하니 당연히 에러가 뜹니다.")]),t._v(" "),a("li",[t._v("이럴땐 "),a("code",[t._v("--force")]),t._v(" 옵션을 주어 강제로 로컬 commit history를 origin commit history로 덮어씁니다. 즉, 만약 해당 리포를 다른 사람들과 공유하고 있다면 "),a("strong",[t._v("무조건")]),t._v(" 하시면 안되는 행동입니다.")])]),t._v(" "),a("h3",{attrs:{id:"reset-사용하는-경우"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reset-사용하는-경우"}},[t._v("#")]),t._v(" reset 사용하는 경우")]),t._v(" "),a("p",[t._v("위처럼 다른 사람간 코드가 공유될 때, reset를 사용하면 상상치도 못하는 헬게이트가 열립니다. 그러므로 reset를 사용하는 경우는 아래와 같습니다.")]),t._v(" "),a("ul",[a("li",[t._v("혼자만 사용하는 브랜치인 경우")]),t._v(" "),a("li",[t._v("origin에 있지만 아무도 이 브랜치를 사용하지 않는다는 확신을 가지는 경우")])]),t._v(" "),a("p",[t._v("그 이외의 경우 commit을 되돌릴때 아래의 "),a("code",[t._v("revert")]),t._v("를 사용합니다.")]),t._v(" "),a("h2",{attrs:{id:"revert"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#revert"}},[t._v("#")]),t._v(" revert")]),t._v(" "),a("p",[t._v("revert는 reset과 다르게 커밋을 삭제하는 것이 아닌 커밋을 추가합니다.")]),t._v(" "),a("p",[t._v("그러나 이전 커밋과 정반대의 데이터를 추가하는 방식으로 코드를 되돌립니다.")]),t._v(" "),a("p",[t._v("revert 명령어는 "),a("code",[t._v("reset --soft")]),t._v(", "),a("code",[t._v("mixed")]),t._v("와 동일한 결과를 가져오지만 이력은 "),a("code",[t._v('Revert "..."')]),t._v("라는 메세지가 추가됩니다.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git commit -m "1번 커밋"\ngit commit -m "2번 커밋"\ngit commit -m "3번 커밋"\n\ngit revert [1번commit hash]\n')])])]),a("p",[t._v("위처럼 명령어를 실행하면 "),a("code",[t._v("1번 커밋")]),t._v(" 이후의 커밋들이 삭제되는 것이 아니라, "),a("strong",[a("code",[t._v("1번 커밋")]),t._v("에 해당하는 내용만 삭제")]),t._v("됩니다. 그리고 "),a("code",[t._v('Revert "1번 커밋"')]),t._v("이라는 커밋에는 1번 커밋이 삭제된 이력이 남게 되죠.")]),t._v(" "),a("p",[a("code",[t._v("git log")]),t._v("에는 아래와 같이 찍힙니다.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('Revert "1번 커밋"\n3번 커밋\n2번 커밋\n1번 커밋\n')])])]),a("h3",{attrs:{id:"바로-커밋되게-하지-않으려면"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#바로-커밋되게-하지-않으려면"}},[t._v("#")]),t._v(" 바로 커밋되게 하지 않으려면?")]),t._v(" "),a("p",[t._v("만약 revert한 결과를 stage 상태만 유지하고, commit 하지 않으려면 "),a("code",[t._v("--no-commit")]),t._v(" 옵션을 추가합니다.")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git revert --no-commit [커밋 해쉬]\n\n// 이후\ngit commit -m "어떤 커밋을 왜 리버트했니?"\n\ngit push\n')])])]),a("h3",{attrs:{id:"여러개-커밋을-되돌리려면"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#여러개-커밋을-되돌리려면"}},[t._v("#")]),t._v(" 여러개 커밋을 되돌리려면?")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("git revert [커밋해쉬]..[커밋해쉬]\n")])])]),a("p",[t._v("git log에는")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('git revert [1번커밋해쉬]..[2번커밋해쉬]\ngit log\n\nRevert "2번커밋해쉬"\nRevert "1번커밋해쉬"\n')])])]),a("p",[t._v("revert는 되돌리는 커밋이 중간에 있을때 커밋 해쉬를 넣어서 중간 커밋만 삭제할 수 있고, 어떤 커밋이 왜 revert 됬는지 commit message를 통해 관찰 가능함으로 더욱 유용합니다.")]),t._v(" "),a("p",[t._v("또는 revert는 커밋은 삭제되는 것보다 이전으로 되돌리는 이력마저 남기는 것이 history 유지 차원에서 더 좋습니다.")]),t._v(" "),a("p",[t._v("그래서 "),a("code",[t._v("revert")]),t._v(" 씁시다!")]),t._v(" "),a("TagLinks"),t._v(" "),a("Comment")],1)}),[],!1,null,null,null);e.default=r.exports}}]);